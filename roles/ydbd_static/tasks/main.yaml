- name: check if required variables are defined
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
    fail_msg: "{{ item }} variable is required"
  loop:
    - ydb_cores_static
    - ydb_disks
    - ydb_domain
    - ydb_user

- name: check if required secrets are defined
  no_log: true
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
    fail_msg: "{{ item }} secret is required"
  loop:
    - ydb_password

- name: create static node configuration file
  command: "{{ ydb_dir }}/home/update_config_file.sh ydbd-config.yaml ydbd-config-static.yaml STORAGE {{ ydb_cores_static }}"
  changed_when: false

- name: create static node systemd unit
  template:
    src: ydbd-storage.service
    dest: "/etc/systemd/system/ydbd-storage.service"
  notify:
    - daemon reload

- name: flush handlers
  meta: flush_handlers

- name: format drives confirmation block
  when: ydb_allow_format_drives and not ydb_skip_data_loss_confirmation_prompt
  block:
    - name: ask user confirmation for format drives
      ansible.builtin.pause:
        prompt: 'RISK OF DATA LOSS: "ydb_allow_format_drives" is set to "true": this may cause data loss if not handled with care! Enter "yes" to continue.'
      register: prompt
      run_once: true

    - name: stop execution
      ansible.builtin.fail:
        msg: "aborting playbook execution"
      when: prompt.user_input != "yes"

- name: prepare drives
  ydb_platform.ydb.drive_prepare:
    name: "{{ item['name'] }}"
    label: "{{ item['label'] }}"
    ydbd_bin: "{{ ydb_dir }}/bin/ydbd"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    allow_format: "{{ ydb_allow_format_drives }}"
  with_items: "{{ ydb_disks }}"

- name: start storage node
  ansible.builtin.systemd:
    name: ydbd-storage
    state: started
    enabled: true
  any_errors_fatal: true

- name: get ydb token
  ydb_platform.ydb.get_token:
    ydb_bin: "{{ ydb_dir }}/bin/ydb"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    database: "/{{ ydb_domain }}"
    user: "{{ ydb_user }}"
    password: "{{ ydb_password }}"
  run_once: true
  register: ydb_credentials
  until: "'token' in ydb_credentials"
  retries: 10
  delay: 10

- name: wait for ydb discovery to start working locally
  ydb_platform.ydb.wait_discovery:
    ydb_bin: "{{ ydb_dir }}/bin/ydb"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    database: "/{{ ydb_domain }}"
    token: "{{ ydb_credentials.token }}"
  any_errors_fatal: true

- name: install ydb-dstool
  ansible.builtin.pip:
    name: "ydb-dstool==0.0.11"
    virtualenv: "{{ ydb_dir}}/virtualenv"

- name: init YDB storage if not initialized
  ydb_platform.ydb.init_storage:
    config_file: "{{ ydb_dir }}/cfg/ydbd-config-static.yaml"
    ydbd_bin: "{{ ydb_dir }}/bin/ydbd"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    token: "{{ ydb_credentials.token }}"
  register: init_storage
  run_once: true

- name: wait for ydb healthcheck switch to "GOOD" status
  ydb_platform.ydb.wait_healthcheck:
    ydb_bin: "{{ ydb_dir }}/bin/ydb"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    database: "/{{ ydb_domain }}"
    token: "{{ ydb_credentials.token }}"
  run_once: true

- name: set cluster root password
  ydb_platform.ydb.set_user_password:
    ydb_bin: "{{ ydb_dir }}/bin/ydb"
    ld_library_path: "{{ ydb_dir }}/lib"
    ca_file: "{{ ydb_dir }}/certs/ca.crt"
    endpoint: "grpcs://{{ inventory_hostname }}:2135"
    database: "/{{ ydb_domain }}"
    user: "{{ ydb_user }}"
    new_password: "{{ ydb_password }}"
    token: "{{ ydb_credentials.token }}"
  run_once: true
