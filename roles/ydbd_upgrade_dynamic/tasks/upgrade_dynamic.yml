---
# YDB upgrade dynamic nodes on a single host

- name: Create the YDB server binary directory
  file:
    state: directory
    path: "{{ ydb_dir }}/release/{{ ydb_version }}"
    group: bin
    owner: root
    mode: '0755'
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  any_errors_fatal: true

- name: Install the YDB server binary package
  ansible.builtin.unarchive:
    creates: "{{ ydb_dir }}/release/{{ ydb_version }}/bin/ydbd"
    dest: "{{ ydb_dir }}/release/{{ ydb_version }}"
    group: bin
    owner: root
    src: "{{ ydb_archive }}"
    extra_opts: "{{ ydb_unpack_options }}"
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  any_errors_fatal: true

- name: Symlink the YDB binaries
  file:
    path: "{{ ydb_dir }}/bin"
    src: "./release/{{ ydb_version }}/bin"
    state: link
    force: yes
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  any_errors_fatal: true

- name: Symlink the YDB libraries
  file:
    path: "{{ ydb_dir }}/lib"
    src: "./release/{{ ydb_version }}/lib"
    state: link
    force: yes
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  any_errors_fatal: true

- name: "Identify the services for all databases on {{ dynnode_name }}"
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  ansible.builtin.command: "{{ ydb_dir }}/home/list_all_db_services.sh"
  register: ydbd_db_svc

- name: "Restart the database services on {{ dynnode_name }}"
  when: ydbd_db_svc.stdout_lines|length > 0
  delegate_to: "{{ dynnode_name }}"
  delegate_facts: true
  any_errors_fatal: true
  block:
    - name: "Invoke the service restart on {{ dynnode_name }}"
      any_errors_fatal: true
      loop: "{{ ydbd_db_svc.stdout_lines }}"
      ansible.builtin.systemd:
        state: restarted
        name: "{{ item.split(' ')[0] }}.service"
    - name: "Transfer the secrets to {{ dynnode_name }}"
      copy:
        src: secret
        dest: "{{ ydb_dir }}/certs/secret"
        group: ydb
        owner: ydb
        mode: '0700'
    - name: "Wait for the dynamic nodes to come up on {{ dynnode_name }}"
      become: true
      become_user: ydb
      loop: "{{ ydbd_db_svc.stdout_lines }}"
      ansible.builtin.command:
        cmd: "{{ ydb_dir }}/home/wait_dynamic.sh {{ dynnode_name }} {{ item.split(' ')[1] }} {{ item.split(' ')[2] }}"
    - name: "Cleanup the transferred secrets on {{ dynnode_name }}"
      file: state=absent path={{ ydb_dir }}/certs/secret
    - name: Additional delay to settle the dynamic nodes
      ansible.builtin.pause: seconds={{ dynnode_restart_sleep_seconds }}
