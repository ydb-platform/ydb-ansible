---
# ydbd installation

- name: Display the distribution type
  ansible.builtin.debug:
    var: ansible_distribution

- name: Ensure libaio1 is installed
  ansible.builtin.package:
    name: libaio1
    state: present
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian' or ansible_distribution == 'Astra Linux'

- name: Ensure libaio is installed
  ansible.builtin.package:
    name: libaio
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'AlmaLinux' or ansible_distribution == 'RED'

- name: Ensure acl is installed
  ansible.builtin.package:
    name: acl
    state: present
  when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian' or ansible_distribution == 'Astra Linux'

- name: Ensure chrony is installed
  ansible.builtin.package:
    name: chrony
    state: present

- name: Ensure chrony is running
  ansible.builtin.systemd:
    enabled: true
    state: started
    name: chronyd

- name: Ensure jq is installed
  ansible.builtin.package:
    name: jq
    state: present

- name: Deploy custom libidn
  block:
    - name: Unpacking custom libidn
      unarchive: creates=/usr/local/lib/libidn.so.11 dest=/usr/local/lib group=bin owner=root src={{ libidn_archive }}
    - name: Symlinking libidn.so.11 to /lib64
      ansible.builtin.file:
        src: /usr/local/lib/libidn.so.11
        dest: /lib64/libidn.so.11
        owner: root
        group: bin
        state: link
    - name: Symlinking libidn.so.11 to /usr/lib
      ansible.builtin.file:
        src: /usr/local/lib/libidn.so.11
        dest: /usr/lib/libidn.so.11
        owner: root
        group: bin
        state: link
    - name: Symlinking libidn.so.12 to /usr/lib
      ansible.builtin.file:
        src: /usr/local/lib/libidn.so.12
        dest: /usr/lib/libidn.so.12
        owner: root
        group: bin
        state: link
  when: libidn_archive is defined

- name: Copy the thp-config.sh script
  copy: src=thp-config.sh dest=/usr/local/bin/ydbd-thp-config.sh

- name: Generate the THP service files
  template:
    src: thp-service.j2
    dest: "/etc/systemd/system/ydb-hugepages.service"

- name: Refresh systemd services configuration
  ansible.builtin.systemd:
    daemon_reload: true

- name: Activate THP
  ansible.builtin.systemd:
    enabled: true
    state: started
    name: ydb-hugepages

- name: Ensure kernel-modules-extra is installed on RHEL variants
  ansible.builtin.package:
    name: kernel-modules-extra
    state: present
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'AlmaLinux'

- name: Copy the kernel module customization for htcp congestion
  copy: src=modules-ydbd.conf dest=/etc/modules-load.d/50-ydbd.conf

- name: Copy the network sysctl adjustments
  copy: src=sysctl-ydbd.conf dest=/etc/sysctl.d/50-ydbd.conf

- name: Load the tcp_htcp module
  command: "/sbin/modprobe tcp_htcp"

- name: Refresh the current sysctl settings
  command: "/sbin/sysctl --system"

- name: Create the ydb group
  group: name=ydb system=true

- name: Create the ydb user
  user: name=ydb group=ydb groups=disk system=true create_home=true home={{ ydb_dir }}/home comment="YDB Service Account"

- name: Create the Ansible remote_tmp for ydb user
  file:
    path: "{{ ydb_dir }}/home/.ansible/tmp"
    state: directory
    recurse: true
    group: ydb
    owner: ydb

- name: Create the YDB release directory
  file: state=directory path={{ ydb_dir }}/release group=bin owner=root mode=755

- name: Create the YDB configuration directory
  file: state=directory path={{ ydb_dir }}/cfg group=bin owner=root mode=755

- name: Create the YDB audit directory
  file: state=directory path={{ ydb_dir }}/audit group=ydb owner=ydb mode=700

- name: Create the YDB certs directory
  file: state=directory path={{ ydb_dir }}/certs group=ydb owner=ydb mode=700

- name: Create the YDB configuration backup directory
  file: state=directory path={{ ydb_dir }}/reserve group=ydb owner=ydb mode=700

- name: Create the YDB server binary directory
  file: state=directory
        path="{{ ydb_dir }}/release/{{ ydb_version }}"
        recurse=true
        group=bin
        owner=root

- name: Install the YDB server binary package
  ansible.builtin.unarchive:
    creates: "{{ ydb_dir }}/release/{{ ydb_version }}/bin/ydbd"
    dest: "{{ ydb_dir }}/release/{{ ydb_version }}"
    group: bin
    owner: root
    src: "{{ ydb_archive }}"
    extra_opts: "{{ ydb_unpack_options }}"

- name: Symlink the YDB binaries
  file: path="{{ ydb_dir }}/bin"
        src="./release/{{ ydb_version }}/bin"
        state=link
        force=yes

- name: Symlink the YDB libraries
  file: path="{{ ydb_dir }}/lib"
        src="./release/{{ ydb_version }}/lib"
        state=link
        force=yes

- name: Create the YDB CLI default binary directory
  file: state=directory path={{ ydb_dir }}/home/ydb/bin recurse=true group=ydb owner=ydb mode=700

- name: Disable YDB CLI version checks
  copy: src=ydb-cli-config.json dest={{ ydb_dir }}/home/ydb/bin/config.json group=ydb owner=ydb
